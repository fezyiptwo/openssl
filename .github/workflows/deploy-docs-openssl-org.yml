name: "Trigger docs.openssl.org deployment"

on:
  push:
    branches:
      - "openssl-3.[0-9]+"
      - "master"
    paths:
      - "doc/man*/**"

jobs:
  trigger:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1  # Prevent concurrent runs from interfering
      fail-fast: false
      matrix:
        attempt: [1, 2, 3]  # Allow up to 3 automatic retries

    steps:
      - name: "Ensure GitHub CLI is installed"
        run: |
          if ! command -v gh &>/dev/null; then
            echo "GitHub CLI not found. Installing..."
            sudo apt update && sudo apt install -y gh
          else
            echo "✅ GitHub CLI is already installed."
          fi

      - name: "Trigger deployment workflow (Attempt ${{ matrix.attempt }})"
        env:
          GH_REPO: "openssl/openssl-docs"
          GH_TOKEN: ${{ secrets.OPENSSL_MACHINE_TOKEN }}
        run: |
          echo "🔄 Starting deployment (Attempt ${{ matrix.attempt }}/3)..."

          # Exponential backoff retry function
          retry() {
            local max_attempts=5
            local attempt=1
            local delay=5  # Start with 5s delay

            while [ $attempt -le $max_attempts ]; do
              "$@" && return 0  # Exit if command succeeds
              exit_code=$?
              echo "⚠️ Attempt $attempt/$max_attempts failed. Retrying in $delay seconds..."
              sleep $delay
              delay=$((delay * 2))  # Exponential backoff
              attempt=$((attempt + 1))
            done

            echo "❌ Command failed after $max_attempts attempts: $*"
            exit $exit_code
          }

          echo "🚀 Triggering deployment workflow..."
          retry gh workflow run deploy-site.yaml -f branch=${{ github.ref_name }}

          echo "⏳ Waiting for workflow to start..."
          sleep 5  # Allow GitHub to initialize the workflow

          echo "📌 Fetching latest run ID..."
          RUN_ID=""
          for i in {1..5}; do
            RUN_ID=$(gh run list -w deploy-site.yaml -L 1 --json databaseId -q ".[0].databaseId" 2>/dev/null)
            if [[ -n "$RUN_ID" ]]; then
              break
            fi
            echo "🔄 Retrying to fetch RUN_ID ($i/5)..."
            sleep $((i * 3))  # Gradual backoff
          done

          if [[ -z "$RUN_ID" ]]; then
            echo "❌ ERROR: Failed to retrieve workflow run ID. Exiting."
            exit 1
          fi

          echo "✅ Deployment workflow started (Run ID: $RUN_ID). Watching progress..."
          gh run watch "$RUN_ID" --exit-status || {
            echo "❌ Deployment workflow failed. Checking if retry is needed..."
            exit 1  # Ensure GitHub detects failure for automatic re-run
          }

      - name: "Check for Retry Condition"
        if: failure()
        run: |
          echo "⚠️ Deployment failed on attempt ${{ matrix.attempt }}/3."
          echo "🔍 Checking for transient failure reasons..."
          LOGS=$(gh run view --json conclusion -q '.conclusion' 2>/dev/null)

          if [[ "$LOGS" == "timed_out" || "$LOGS" == "cancelled" || "$LOGS" == "failure" ]]; then
            echo "🔄 Retrying deployment..."
            exit 1  # Triggers the next retry in matrix
          else
            echo "❌ Persistent failure detected. Manual intervention may be required."
            exit 0  # Prevents unnecessary retries on permanent errors
          fi

      - name: "📌 Capture Debug Logs"
        if: failure()
        run: |
          echo "📌 Gathering debugging information..."
          echo "🔍 Fetching failed workflow details..."
          gh run view --log-failed || echo "⚠️ Could not fetch logs. Check GitHub Actions UI."
          gh run view --json url -q '.url' || echo "⚠️ Could not fetch workflow URL."
          gh run list -w deploy-site.yaml --json status,conclusion,createdAt -q '.[]' || echo "⚠️ Could not fetch workflow history."

          echo "🔍 Fetching last 50 lines of workflow logs..."
          gh run view --log -q '.jobs[].steps[].logs' | tail -n 50 || echo "⚠️ Could not fetch logs."

      - name: "Upload Logs as Artifacts"
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-debug-logs
          path: |
            /home/runner/.cache/gh-cli
            /home/runner/work/_temp/
          retention-days: 7

      - name: "Notify on Final Failure"
        if: failure() && matrix.attempt == 3
        run: |
          echo "🚨 Deployment failed after 3 attempts!"
          echo "📌 Logs uploaded as artifact: deployment-debug-logs"
          echo "🔍 Check logs here: https://github.com/${{ github.repository }}/actions"
